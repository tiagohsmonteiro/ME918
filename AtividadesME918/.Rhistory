## Parte 0
library(purrr)
library(devtools)
library(usethis)
install.packages("devtools")
library(devtools)
install.packages("usethis")
library(usethis)
?rbernoulli
f <- function(arg){
if (!is.list(arg) || !all(c("distribution", "obs") %in% names(arg))) {
stop("O argumento deve ser uma lista contendo 'distribution', 'parameters' e 'obs'.")
}
dist <- arg$distribution
n <- arg$obs
if (!(dist %in% c("normal", "poisson", "bernoulli"))) {
stop("Distribuição não suportada. Escolha entre 'normal', 'poisson' ou 'bernoulli'.")
}
if (dist == "normal") {
if (!all(c("mu", "sigma2") %in% names(arg))) {
stop("Os parâmetros para normal devem incluir 'mu' e 'sigma2'.")
}
sample <- rnorm(n, arg$mu, arg$sigma2 ^ 0.5)
}
else if (dist == "poisson") {
if (!all("lambda" %in% names(arg))) {
stop("O parâmetro para poisson deve incluir 'lambda'.")
}
sample <- rpois(n, arg$lambda)
}
else if (dist == "bernoulli") {
if (!all("p" %in% names(arg))) {
stop("O parâmetro para bernoulli deve incluir 'p'.")
}
sample <- rbinom(n, 1, p)
}
return(sample)
}
f(list(distribution = "poisson", lambda = 2.0, obs = 20))
f(list(distribution = "normal", mu = 1.2, sigma2 = 1.0, obs = 25))
f(list(distribution = "bernoulli", p = 0.3, obs = 30))
f <- function(arg){
if (!is.list(arg) || !all(c("distribution", "obs") %in% names(arg))) {
stop("O argumento deve ser uma lista contendo 'distribution', 'parameters' e 'obs'.")
}
dist <- arg$distribution
n <- arg$obs
if (!(dist %in% c("normal", "poisson", "bernoulli"))) {
stop("Distribuição não suportada. Escolha entre 'normal', 'poisson' ou 'bernoulli'.")
}
if (dist == "normal") {
if (!all(c("mu", "sigma2") %in% names(arg))) {
stop("Os parâmetros para normal devem incluir 'mu' e 'sigma2'.")
}
sample <- rnorm(n, arg$mu, arg$sigma2 ^ 0.5)
}
else if (dist == "poisson") {
if (!all("lambda" %in% names(arg))) {
stop("O parâmetro para poisson deve incluir 'lambda'.")
}
sample <- rpois(n, arg$lambda)
}
else if (dist == "bernoulli") {
if (!all("p" %in% names(arg))) {
stop("O parâmetro para bernoulli deve incluir 'p'.")
}
sample <- rbinom(n, 1, arg$p)
}
return(sample)
}
f(list(distribution = "bernoulli", p = 0.3, obs = 30))
f(list(distribution = "poisson"))
library(devtools)
install.packages("devtools")
library(devtools)
simulador <- function(arg){
if (!is.list(arg) || !all(c("distribution", "obs") %in% names(arg))) {
stop("O argumento deve ser uma lista contendo 'distribution', 'parameters' e 'obs'.")
}
dist <- arg$distribution
n <- arg$obs
if (!(dist %in% c("normal", "poisson", "bernoulli"))) {
stop("Distribuição não suportada. Escolha entre 'normal', 'poisson' ou 'bernoulli'.")
}
if (dist == "normal") {
if (!all(c("mu", "sigma2") %in% names(arg))) {
stop("Os parâmetros para normal devem incluir 'mu' e 'sigma2'.")
}
sample <- rnorm(n, arg$mu, arg$sigma2 ^ 0.5)
}
else if (dist == "poisson") {
if (!all("lambda" %in% names(arg))) {
stop("O parâmetro para poisson deve incluir 'lambda'.")
}
sample <- rpois(n, arg$lambda)
}
else if (dist == "bernoulli") {
if (!all("p" %in% names(arg))) {
stop("O parâmetro para bernoulli deve incluir 'p'.")
}
sample <- rbinom(n, 1, arg$p)
}
return(sample)
}
library(usethis)
install.packages("usethis")
library(purrr)
library(devtools)
library(usethis)
Sys.getenv("RA")
source("simulador.R")
devtools::source_url("https://ime.unicamp.br/~ra137784/ME918/2023s2/lab01_ig.R")
planos <- input_lab01()
amostra <- map(planos, function(x) simulador(x))
View(amostra)
class(amostra)
library(purrr)
source("executa.R")
map(amostra, function(x) amostra[[x]])
amostra
print(i)
i
for (i in amostra) {
i
}
return i
for (i in amostra) {
return i
amostra[i]
amostra[[i]]
for (i in amostra){
amostra[[i]]
}
amostra[:]
for (i in amostra){
amostra[:]
amostra[,i]
for (i in amostra){
amostra[,i]
}
amostra[[2]]
amostra[[1]]
amostra[[1]][1]
amostra[[1]]
amostra[[2]]
amostra[[3]]
View(amostra)
length(amostra)
for (i in 1:lenght(amostra)){
amostra[[i]]
}
for (i in 1:length(amostra)){
amostra[[i]]
}
i
for (i in 1:length(amostra)){
i
}
print(i)
for (i in 1:length(amostra)){
print(i)
}
amostra[[1]]
amostra[[2]]
amostra[[3]]
amostra[[4]]
paste0("simulacao", i, ".RData")
View(planos)
View(amostra)
planos[[4]]
planos[[1]]
amostra[[1]]
?save
getwd()
dir <- getwd()
dir
paste0(dir, "/resultados/simulacao", i, ".RData")
for (i in 1:length(planos)){
simulacao <- planos[[i]]
simulacao$result <- amostra[[i]]
save(simulacao, file = paste0(dir, "/resultados/simulacao", i, ".RData"))
}
load("~/Faculdade/ME918/AtividadesME918/resultados/simulacao1.RData")
View(simulacao)
for (i in 1:length(planos)){
simulacao <- planos[[i]]
simulacao$result <- amostra[[i]]
if (i < 10) {
save(simulacao, file = paste0(dir, "/resultados/simulacao0", i, ".RData"))
}
else {
save(simulacao, file = paste0(dir, "/resultados/simulacao", i, ".RData"))
}
}
for (i in 1:length(planos)){
simulacao <- planos[[i]]
simulacao$result <- amostra[[i]]
if (i < 10) {
save(simulacao, file = paste0(dir, "/resultados/simulacao0", i, ".RData"))
}
else {
save(simulacao, file = paste0(dir, "/resultados/simulacao", i, ".RData"))
}
}
load("resultados/simulacao01.RData")
View(simulacao)
load("resultados/simulacao13.RData")
View(simulacao)
load("resultados/simulacao40.RData")
View(simulacao)
load("resultados/simulacao3.RData")
load("resultados/simulacao03.RData")
View(simulacao)
amostra <- map(planos, function(x) simulador(x))
source("simulador.R")
devtools::source_url("https://ime.unicamp.br/~ra137784/ME918/2023s2/lab01_ig.R")
planos <- input_lab01()
amostra <- map(planos, function(x) simulador(x))
View(amostra)
load("resultados/simulacao07.RData")
View(simulacao)
load("C:/Users/tiago/Downloads/simulacao01.RData")
View(simulacao)
source("executa.R")
dir <- getwd()
for (i in 1:length(planos)){
simulacao <- planos[[i]]
simulacao$result <- amostra[[i]]
if (i < 10) {
save(simulacao, file = paste0(dir, "/resultados/simulacao0", i, ".RData"))
}
else {
save(simulacao, file = paste0(dir, "/resultados/simulacao", i, ".RData"))
}
}
